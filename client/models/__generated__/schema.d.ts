/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetAllUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}/email": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get email of the current logged in user */
        get: operations["GetEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/reagents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all reagents under a user
         *     User must be authenticated to access this endpoint */
        get: operations["GetReagents"];
        put?: never;
        /** @description Create a reagent by passing in all the required props.
         *     User **must** be authenticated to access this endpoint (lab manager / admin) [seller] */
        post: operations["CreateReagent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/reagents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a reagent by using its ID
         *     User must be authenticated to access this endpoint */
        get: operations["GetReagentById"];
        put?: never;
        post?: never;
        /** @description Delete a reagent by using its ID
         *     User **must** be authenticated to access this endpoint */
        delete: operations["DeleteReagentById"];
        options?: never;
        head?: never;
        /** @description Update a reagent by its ID.
         *     User **must** be authenticated to access this endpoint */
        patch: operations["UpdateReagent"];
        trace?: never;
    };
    "/users/{id}/reagents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description
         *     Get all reagents under another user by their user id
         *     Can only be done by admin* */
        get: operations["GetReagentsByUserId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reagents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get all reagents with an option to filter them by category. */
        get: operations["GetAllReagents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reagents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a reagent by its ID. */
        get: operations["GetReagent"];
        put?: never;
        /** @description Get a reagent by its ID.
         *     Can only be done by lab_admin and admin */
        post: operations["CreateReagent"];
        /** @description Delete a reagent by its ID.
         *     Can only be done by lab_admin (who owns the reagent) and admin */
        delete: operations["DeleteReagent"];
        options?: never;
        head?: never;
        /** @description Update a reagent by its ID.
         *     Can only be done by lab_admin (who owns the reagent) and admin */
        patch: operations["UpdateReagent"];
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetOrders"];
        put?: never;
        post: operations["CreateOrder"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetOrderById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["ApproveOrder"];
        trace?: never;
    };
    "/orders/{id}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch: operations["CancelOrder"];
        trace?: never;
    };
    "/auth/google/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Verifies Google ID token and authenticates user. */
        post: operations["VerifyToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/send-verification-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SendVerificationCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify-code": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["VerifyCode"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["VerifyToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        User: {
            email: string;
            username: string;
            /** @enum {string} */
            role: "user" | "lab_manager" | "admin";
        };
        /** @enum {string} */
        ReagentTradingType: "trade" | "giveaway" | "sell";
        /** @enum {string} */
        ReagentCategory: "chemical" | "hazardous" | "biological";
        Reagent: {
            user_id: string;
            name: string;
            description: string;
            condition: string;
            /** Format: double */
            price?: number;
            /** Format: double */
            quantity: number;
            expiryDate: string;
            tradingType: components["schemas"]["ReagentTradingType"];
            images?: string[];
            categories: components["schemas"]["ReagentCategory"][];
            /** Format: date-time */
            createdAt: string;
            location: string;
        };
        CreateReagentRequest: {
            name: string;
            description: string;
            condition: string;
            categories: components["schemas"]["ReagentCategory"][];
            /** Format: double */
            price?: number;
            /** Format: double */
            quantity: number;
            expiryDate: string;
            tradingType: components["schemas"]["ReagentTradingType"];
            location: string;
            images?: string[];
        };
        /** @description Make all properties in T optional */
        Partial_Reagent_: {
            user_id?: string;
            name?: string;
            description?: string;
            condition?: string;
            /** Format: double */
            price?: number;
            /** Format: double */
            quantity?: number;
            expiryDate?: string;
            tradingType?: components["schemas"]["ReagentTradingType"];
            images?: string[];
            categories?: components["schemas"]["ReagentCategory"][];
            /** Format: date-time */
            createdAt?: string;
            location?: string;
        };
        Order: {
            req_id: string;
            owner_id: string;
            reagent_id: string;
            /** @enum {string} */
            status: "pending" | "approved" | "canceled";
            /** Format: date-time */
            createdAt: string;
        };
        CreateOrderRequest: {
            req_id: string;
            reagent_id: string;
        };
        GoogleOAuthUser: {
            uid: string;
            email: string;
            displayName?: string;
            photoURL?: string;
        };
        GoogleOAuthResponse: {
            success: boolean;
            message: string;
            token?: string;
            user?: components["schemas"]["GoogleOAuthUser"];
        };
        GoogleOAuthRequest: {
            idToken: string;
        };
        SendVerificationCodeResponse: {
            success: boolean;
            message: string;
        };
        SendVerificationCodeRequest: {
            email: string;
        };
        VerifyCodeResponse: {
            success: boolean;
            message: string;
        };
        VerifyCodeRequest: {
            email: string;
            inputCode: string;
        };
        VerifyTokenResponse: {
            success: boolean;
            message: string;
            uid?: string;
            email?: string;
        };
        VerifyTokenRequest: {
            idToken: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetAllUsers: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
        };
    };
    GetEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User email retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        email: string;
                    };
                };
            };
        };
    };
    GetReagents: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All reagents returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"][];
                };
            };
        };
    };
    CreateReagent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - the request object containing the data of the reagent (id generated by db) */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReagentRequest"];
            };
        };
        responses: {
            /** @description Reagent created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"];
                };
            };
        };
    };
    GetReagentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description - The ID of the reagent to fetch */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description reagent returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"] | null;
                };
            };
        };
    };
    DeleteReagentById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description - The ID of the reagent to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description reagent deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"] | null;
                };
            };
        };
    };
    UpdateReagent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description - The ID of the reagent to update. */
                id: string;
            };
            cookie?: never;
        };
        /** @description - The updated reagent data (partial fields allowed) */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Partial_Reagent_"];
            };
        };
        responses: {
            /** @description Reagent updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"];
                };
            };
        };
    };
    GetReagentsByUserId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All reagents returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"][];
                };
            };
        };
    };
    GetAllReagents: {
        parameters: {
            query?: {
                /** @description - The list of all categories to fetch reagents from. */
                category?: components["schemas"]["ReagentCategory"][];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reagents retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"][];
                };
            };
        };
    };
    GetReagent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description - The ID of the reagent to retrieve. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reagent retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"];
                };
            };
        };
    };
    CreateReagent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description - the request object containing the data of the reagent (id generated by db) */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReagentRequest"];
            };
        };
        responses: {
            /** @description Reagent created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"];
                };
            };
        };
    };
    DeleteReagent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description - The ID of the reagent to delete. */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reagent deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"];
                };
            };
        };
    };
    UpdateReagent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description - The ID of the reagent to update. */
                id: string;
            };
            cookie?: never;
        };
        /** @description - The updated reagent data (partial fields allowed) */
        requestBody: {
            content: {
                "application/json": components["schemas"]["Partial_Reagent_"];
            };
        };
        responses: {
            /** @description Reagent updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Reagent"];
                };
            };
        };
    };
    GetOrders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All orders returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"][];
                };
            };
        };
    };
    CreateOrder: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderRequest"];
            };
        };
        responses: {
            /** @description Order created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    GetOrderById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All orders returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    ApproveOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description order successfully approved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    CancelOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description order successfully canceld */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"];
                };
            };
        };
    };
    VerifyToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GoogleOAuthRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GoogleOAuthResponse"];
                };
            };
        };
    };
    SendVerificationCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SendVerificationCodeRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SendVerificationCodeResponse"];
                };
            };
        };
    };
    VerifyCode: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyCodeRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyCodeResponse"];
                };
            };
        };
    };
    VerifyToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyTokenRequest"];
            };
        };
        responses: {
            /** @description Ok */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["VerifyTokenResponse"];
                };
            };
        };
    };
}
