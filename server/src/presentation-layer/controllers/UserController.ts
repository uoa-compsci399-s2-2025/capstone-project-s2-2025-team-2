import { User } from "../../business-layer/models/User"
import {
  Controller,
  Get,
  Post,
  Delete,
  Route,
  SuccessResponse,
  Security,
  Request,
  Path,
  Body,
  Patch,
  Tags,
} from "tsoa"
import { UserService } from "../../data-layer/repositories/UserRepository"
import { Reagent } from "../../business-layer/models/Reagent"
import { ReagentService } from "../../data-layer/repositories/ReagentRepository"
import { CreateReagentRequest } from "../../service-layer/dtos/request/ReagentRequest"
import { AuthRequest } from "../../service-layer/dtos/request/AuthRequest"

@Tags("User")
@Route("users")
export class UserController extends Controller {
  @SuccessResponse("200", "Users retrieved successfully")
  @Get()
  public async getAllUsers(): Promise<User[]> {
    console.log("Getting all users...")
    const users = await new UserService().getAllUsers()
    console.log(`Returning ${users.length} users`)
    return users
  }
  /**
   * get user info using user id
   *
   * @param user_id - the id of the user to fetch
   * @returns user info including display name
   */
  @SuccessResponse("200", "User retrieved successfully")
  @Get("{user_id}")
  public async getUserById(@Path() user_id: string): Promise<User | null> {
    console.log("Getting user by ID:", user_id)
    const user = await new UserService().getUserById(user_id)
    return user
  }

  /**
   * Get email of the current logged in user
   *
   * @param jwt- jwt token is needed for the user to be verified
   * @returns email of the user who calls this endpoint
   */
  @Security("jwt")
  @SuccessResponse("200", "User email retrieved successfully")
  @Get("{user_id}/email")
  public async getEmail(
    @Request() request: AuthRequest,
    @Path() user_id: string,
  ): Promise<{ email: string }> {
    console.log("getting user's email..")
    console.log(user_id)
    const user = request.user
    return { email: user.email }
  }

  /**
   * Get all reagents under a user
   * User must be authenticated to access this endpoint
   * @param user_id - user id to query with
   * @returns Promise<Reagent[]> - The list of all reagents filtered.
   */
  @SuccessResponse("200", "All reagents returned successfully")
  @Security("jwt")
  @Get("/reagents")
  public async getReagents(
    @Request() request: AuthRequest,
  ): Promise<Reagent[]> {
    try {
      const user = request.user
      const user_id = user.uid
      if (user_id) {
        const reagents = await new ReagentService().getReagentsByUserId(user_id)
        return reagents
      }
      return []
    } catch (err) {
      throw new Error("Failed to fetch reagents: " + (err as Error).message)
    }
  }

  /**
   * Get a reagent by using its ID
   * User must be authenticated to access this endpoint
   * @param id - The ID of the reagent to fetch
   * @returns Promise<Reagent> - object of type Reagent
   */
  @SuccessResponse("200", "reagent returned successfully")
  @Get("/reagents/{id}")
  @Security("jwt")
  public async getReagentById(@Path() id: string): Promise<Reagent | null> {
    try {
      const reagent = await new ReagentService().getReagentById(id)
      return reagent
    } catch (err) {
      throw new Error(
        `Failed to fetch reagent -- id:${id} ` + (err as Error).message,
      )
    }
  }

  /**
   * Delete a reagent by using its ID
   * User **must** be authenticated to access this endpoint
   * @param id - The ID of the reagent to delete
   * @returns Promise<Reagent> - object of type Reagent (deleted ref)
   */
  @SuccessResponse("200", "reagent deleted successfully")
  @Security("jwt")
  @Delete("/reagents/{id}")
  public async deleteReagentById(
    @Path() id: string,
    @Request() request: AuthRequest,
  ): Promise<Reagent | null> {
    try {
      const user = request.user
      const user_id = user.uid
      const reagent = await new ReagentService().getReagentById(id)
      if (user_id !== reagent.user_id) {
        console.log("You cannot delete a reagent that you don't own")
        return null
      }
      const reagentToDelete = await new ReagentService().deleteReagent(id)
      return reagentToDelete
    } catch (err) {
      throw new Error(
        `Failed to delete reagent -- id:${id} ` + (err as Error).message,
      )
    }
  }

  /**
   * Create a reagent by passing in all the required props.
   * User **must** be authenticated to access this endpoint (lab manager / admin) [seller]
   * @param id - The ID of the new reagent being created.
   * @param requestObject - the request object containing the data of the reagent (id generated by db)
   * @returns Promise<Reagent> - object of type Reagent (created ref)
   */
  @SuccessResponse("201", "Reagent created successfully")
  @Security("jwt")
  @Post("/reagents")
  public async createReagent(
    @Request() request: AuthRequest,
    @Body() requestObject: CreateReagentRequest,
  ): Promise<Reagent> {
    console.log(request)
    const user = request.user
    console.log(request.user.uid)
    console.log(user.role)
    if (!user || !["admin", "lab_manager"].includes(user.role)) {
      throw new Error("You don't have permission to create reagents")
    }
    const user_id = request.user.uid
    const data = {
      ...requestObject,
      user_id,
    }
    const newReagent = await new ReagentService().createReagent(data as Reagent)
    return newReagent
  }

  /**
   * Update a reagent by its ID.
   * User **must** be authenticated to access this endpoint
   * @param id - The ID of the reagent to update.
   * @param update - The updated reagent data (partial fields allowed)
   * @returns Promise<Reagent> - object of type Reagent (updated ref)
   * @throws 400 - If the operation fails
   */
  @SuccessResponse("200", "Reagent updated successfully")
  @Security("jwt")
  @Patch("/reagents/{id}")
  public async updateReagent(
    @Path() id: string,
    @Body() update: Partial<Reagent>,
    @Request() request: AuthRequest,
  ): Promise<Reagent> {
    try {
      const reagent = await new ReagentService().getReagentById(id)
      const uid = request.user?.uid
      if (reagent.user_id == uid) {
        const updatedReagent = await new ReagentService().updateReagent(
          id,
          update,
        )
        return updatedReagent
      }
      return null
    } catch (error) {
      this.setStatus(400)
      throw new Error(`[ERROR] while updating reagent ${id}: ${error}`)
    }
  }

  /**
 
Get all reagents under another user by their user id
Can only be done by admin*
@param user_id - user id to query with
@returns Promise<Reagent[]> - The list of all reagents filtered.*/

  @SuccessResponse("200", "All reagents returned successfully")
  @Security("jwt")
  @Get("/{id}/reagents")
  public async getReagentsByUserId(
    @Path() id: string,
    @Request() request: AuthRequest,
  ): Promise<Reagent[]> {
    try {
      if (request.user.role !== "admin") {
        throw new Error("You don't have permission to access this endpoint")
      }
      const reagents = await new ReagentService().getReagentsByUserId(id)
      return reagents
    } catch (err) {
      throw new Error("Failed to fetch reagents: " + (err as Error).message)
    }
  }
}
