import FirestoreCollections from "../adapters/FirestoreCollections"
import { Wanted } from "../../business-layer/models/Wanted"
import { ReagentCategory } from "business-layer/models/Reagent"
import { Timestamp } from "firebase-admin/firestore"

export class WantedRepository {
  /**
   * Get all wanted reagents from the database.
   *
   * @returns Promise<Wanted[]> - An array of all wanted reagents posted by users.
   */
  async getAllWantedReagents(): Promise<Wanted[]> {
    const wantedSnapshot = await FirestoreCollections.wanted.get()
    return wantedSnapshot.docs.map((doc) => {
     const data = doc.data()
     return { id: doc.id, ...data } as Wanted
    })
}

     /**
      * Get a wanted reagent by its ID.
      *
      * @param id - The ID of the wanted reagent to retrieve.
      * @returns Promise<Wanted | null> - The wanted reagent if found, otherwise null.
      */
     async getWantedReagentById(id:string): Promise<Wanted | null> {
          const wantedSnapshot = await FirestoreCollections.wanted.doc(id).get()
          if (!wantedSnapshot.exists) {
               return null
          }
          return wantedSnapshot.data()
     
     }

     /**
      * Get wanted reagents by its categories
      * 
      * @param categories - The category of the wanted reagent to retrive.
      * returns Promise<Wanted[]> - Returns an array of reagents.
      */
     async getWantedReagentsByCategory(
          categories: ReagentCategory[],
     ): Promise<Wanted[]> {
          const wantedSnapshot = await FirestoreCollections.wanted
          .where("categories", "array-contains-any", categories)
          .get()
          return wantedSnapshot.docs.map((doc) => doc.data())
     }

     /**
      * Get wanted reagents by its owner from the Firestore database.
      * 
      * @param user_id - The user id used to get thier wanted reagents.
      * @returns Promise<Wanted[]> - Returns an array of reagents.
      */
     async getWantedReagentsByUserId(user_id:string): Promise<Wanted[]> {
          const wantedSnapshot = await FirestoreCollections.wanted
          .where("user_id", "==", user_id)
          .get()
          return wantedSnapshot.docs.map((doc) => doc.data())
     }

     /**
      * Creates a new wanted reagent in the Firestore database.
      * 
      * @params newWanted - the wanted reagent to create.
      * @returns Reagent - Returns the created wanted reagent with its ID generated by firebase
      */

     async createWanted(
          newWanted: Omit<Wanted, "createdAt"|"id">
     ): Promise<Wanted & {id:string}> {
          const createdAt = Timestamp.now().toDate().toISOString()
          const docRef = await FirestoreCollections.wanted.add({
               ...newWanted,
               createdAt,
          })
          const result = {
               ...newWanted,
               id:docRef.id,
               createdAt,
          }
          return result
     }

}