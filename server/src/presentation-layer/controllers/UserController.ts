import { User } from "../../business-layer/models/User"
import {
  Controller,
  Get,
  Post,
  Delete,
  Route,
  SuccessResponse,
  Security,
  Request,
  Path,
  Query,
  Body,
  Patch,
  Tags,
} from "tsoa"
import { UserService } from "../../data-layer/repositories/UserRepository"
import { Reagent } from "../../business-layer/models/Reagent"
import { ReagentService } from "../../data-layer/repositories/ReagentRepository"
import { ReagentCategory } from "business-layer/models/Reagent"
import { CreateReagentRequest } from "../../service-layer/dtos/request/ReagentRequest"
import { AuthRequest } from "../../service-layer/dtos/request/AuthRequest"

@Tags("Authentication")
@Route("users")
export class UserController extends Controller {
  @SuccessResponse("200", "Users retrieved successfully")
  @Get()
  public async getAllUsers(): Promise<User[]> {
    console.log("Getting all users...")
    const users = await new UserService().getAllUsers()
    console.log(`Returning ${users.length} users`)
    return users
  }
  /**
   * Get email of the current logged in user
   *
   * @param jwt- jwt token is needed for the user to be verified
   * @returns email of the user who calls this endpoint
   */
  @Security("jwt")
  @SuccessResponse("200", "User email retrieved successfully")
  @Get("{user_id}/email")
  public async getEmail(
    @Request() request: AuthRequest,
    @Path() user_id: string,
  ): Promise<{ email: string }> {
    console.log("getting user's email..")
    console.log(user_id)
    const user = request.user
    return { email: user.email }
  }

  /**
   * Get all reagents with an option to filter them by category.
   * User must be authenticated to access this endpoint
   * @param category - The list of all categories to fetch reagents from.
   * @returns Promise<Reagent[]> - The list of all reagents filtered.
   */
  @SuccessResponse("200", "All reagents returned successfully")
  @Security("jwt")
  @Get("/reagents")
  public async getReagents(
    @Query() category?: ReagentCategory[],
  ): Promise<Reagent[]> {
    try {
      if (category) {
        const reagents = await new ReagentService().getReagentsByCategory(
          category,
        )
        return reagents
      }
      const reagents = await new ReagentService().getAllReagents()
      return reagents
    } catch (err) {
      throw new Error("Failed to fetch reagents: " + (err as Error).message)
    }
  }

  /**
   * Get a reagent by using its ID
   * User must be authenticated to access this endpoint
   * @param id - The ID of the reagent to fetch
   * @returns Promise<Reagent> - object of type Reagent
   */
  @SuccessResponse("200", "reagent returned successfully")
  @Get("/reagent/{id}")
  @Security("jwt")
  public async getReagentById(@Path() id: string): Promise<Reagent | null> {
    try {
      const reagent = await new ReagentService().getReagentsById(id)
      return reagent
    } catch (err) {
      throw new Error(
        `Failed to fetch reagent -- id:${id} ` + (err as Error).message,
      )
    }
  }

  /**
   * Delete a reagent by using its ID
   * User **must** be authenticated to access this endpoint
   * @param id - The ID of the reagent to delete
   * @returns Promise<Reagent> - object of type Reagent (deleted ref)
   */
  @SuccessResponse("200", "reagent deleted successfully")
  @Security("jwt")
  @Delete("/reagent/delete/{id}")
  public async deleteReagentById(@Path() id: string): Promise<Reagent | null> {
    try {
      const reagent = await new ReagentService().deleteReagent(id)
      return reagent
    } catch (err) {
      throw new Error(
        `Failed to delete reagent -- id:${id} ` + (err as Error).message,
      )
    }
  }

  /**
   * Create a reagent by its ID.
   * User **must** be authenticated to access this endpoint
   * @param id - The ID of the new reagent being created.
   * @param requestObject - the request object containing the data of the reagent (id generated by db)
   * @returns Promise<Reagent> - object of type Reagent (created ref)
   */
  @SuccessResponse("201", "Reagent created successfully")
  @Security("jwt")
  @Post("/reagent/{id}")
  public async createReagent(
    @Path() id: string,
    @Request() request: Request,
    @Body() requestObject: CreateReagentRequest,
  ): Promise<Reagent> {
    const token = (request as any).user
    const userId = token.uid || token.user_id || "unknown_user"
    const data = {
      ...requestObject,
      id,
      userId,
    }
    const newReagent = await new ReagentService().createReagent(data as Reagent)
    return newReagent
  }

  /**
   * Update a reagent by its ID.
   * User **must** be authenticated to access this endpoint
   * @param id - The ID of the reagent to update.
   * @param update - The updated reagent data (partial fields allowed)
   * @returns Promise<Reagent> - object of type Reagent (updated ref)
   * @throws 400 - If the operation fails
   */
  @SuccessResponse("200", "Reagent updated successfully")
  @Security("jwt")
  @Patch("/reagent/update/{id}")
  public async updateReagent(
    @Path() id: string,
    @Body() update: Partial<Reagent>,
  ): Promise<Reagent> {
    try {
      const updatedReagent = await new ReagentService().updateReagent(
        id,
        update,
      )
      return updatedReagent
    } catch (error) {
      this.setStatus(400)
      throw new Error(`[ERROR] while updating reagent ${id}: ${error}`)
    }
  }
}
