import { Reagent, ReagentCategory } from "../../business-layer/models/Reagent"
import {
  Controller,
  Get,
  Post,
  Path,
  Route,
  SuccessResponse,
  Query,
  Body,
  Delete,
  Patch,
} from "tsoa"
import { ReagentService } from "../../data-layer/repositories/ReagentRepository"
import { CreateReagentRequest } from "service-layer/dtos/request/ReagentRequest"

@Route("reagents")
export class ReagentController extends Controller {
  /**
   * Get all reagents with an option to filter them by category.
   *
   * @param category - The list of all categories to fetch reagents from.
   * @returns Promise<Reagent[]> - The list of all reagents filtered.
   */
  @SuccessResponse("200", "Reagents retrieved successfully")
  @Get()
  public async getAllReagents(
    @Query() category?: ReagentCategory[],
  ): Promise<Reagent[]> {
    if (category) {
      const reagents = await new ReagentService().getReagentsByCategory(
        category,
      )
      return reagents
    }
    const reagents = await new ReagentService().getAllReagents()
    return reagents
  }

  /**
   * Get a reagent by its ID.
   *
   * @param id - The ID of the reagent to retrieve.
   * @returns Promise<Reagent> - The reagent with the specified ID.
   * @throws 404 - If the reagent with the specified ID does not exist.
   */
  @SuccessResponse("200", "Reagent retrieved successfully")
  @Get("{id}")
  public async getReagent(@Path() id: string): Promise<Reagent> {
    const reagent = await new ReagentService().getReagentById(id)
    if (reagent === null) {
      this.setStatus(404)
      return undefined
    }
    return reagent
  }

  /**
   * Get a reagent by its ID.
   * Can only be done by lab_admin and admin
   * @param requestObject - the request object containing the data of the reagent (id generated by db)
   * @returns Promise<Reagent> - a reagent bundled with a generated id
   */
  @SuccessResponse("201", "Reagent created successfully")
  @Post()
  public async createReagent(
    @Body() requestObject: CreateReagentRequest,
  ): Promise<Reagent> {
    // AuthSerice should be used to get the userId
    const data = {
      ...requestObject,
      // <userId> This should be replaced with the authenticated user's ID
    }
    const newReagent = await new ReagentService().createReagent(data as Reagent)
    return newReagent
  }

  /**
   * Delete a reagent by its ID.
   * Can only be done by lab_admin (who owns the reagent) and admin
   *
   * @param id - The ID of the reagent to delete.
   * @returns Promise<Reagent> - The deleted reagent.
   * @throws 404 - If the reagent with the specified ID does not exist.
   */
  @SuccessResponse("200", "Reagent deleted successfully")
  @Delete("{id}")
  public async deleteReagent(@Path() id: string): Promise<Reagent> {
    try {
      const deletedReagent = await new ReagentService().deleteReagent(id)
      return deletedReagent
    } catch (error) {
      this.setStatus(404)
      throw new Error(`[ERROR] while deleting reagent ${id}: ${error}`)
    }
  }

  /**
   * Update a reagent by its ID.
   * Can only be done by lab_admin (who owns the reagent) and admin
   *
   * @param id - The ID of the reagent to update.
   * @param update - The updated reagent data (partial fields allowed)
   * @returns Promise<Reagent> - The deleted reagent.
   * @throws 400 - If the operation fails
   */
  @SuccessResponse("200", "Reagent updated successfully")
  @Patch("{id}")
  public async updateReagent(
    @Path() id: string,
    @Body() update: Partial<Reagent>,
  ): Promise<Reagent> {
    try {
      const updatedReagent = await new ReagentService().updateReagent(
        id,
        update,
      )
      return updatedReagent
    } catch (error) {
      this.setStatus(400)
      throw new Error(`[ERROR] while updating reagent ${id}: ${error}`)
    }
  }
}
